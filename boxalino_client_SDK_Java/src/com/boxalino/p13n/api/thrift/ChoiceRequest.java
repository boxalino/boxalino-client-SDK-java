/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * <dl>
 * <dt>profileId</dt>
 * <dd>profile (visitor) identificator</dd>
 * 
 * <dt>inquiries</dt>
 * <dd>list of inquiries to be executed sequentially.</dd>
 * <dd>Inquiries with higher index may depend from those with lower index.</dd>
 * 
 * <dt>requestContext</dt>
 * <dd>context of the request</dd>
 * </dl>
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-25")
public class ChoiceRequest implements org.apache.thrift.TBase<ChoiceRequest, ChoiceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ChoiceRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChoiceRequest");

  private static final org.apache.thrift.protocol.TField USER_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("userRecord", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INQUIRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("inquiries", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField REQUEST_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestContext", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChoiceRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChoiceRequestTupleSchemeFactory();

  public UserRecord userRecord; // required
  public java.lang.String profileId; // required
  public java.util.List<ChoiceInquiry> inquiries; // required
  public RequestContext requestContext; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_RECORD((short)1, "userRecord"),
    PROFILE_ID((short)2, "profileId"),
    INQUIRIES((short)3, "inquiries"),
    REQUEST_CONTEXT((short)4, "requestContext");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_RECORD
          return USER_RECORD;
        case 2: // PROFILE_ID
          return PROFILE_ID;
        case 3: // INQUIRIES
          return INQUIRIES;
        case 4: // REQUEST_CONTEXT
          return REQUEST_CONTEXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_RECORD, new org.apache.thrift.meta_data.FieldMetaData("userRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserRecord.class)));
    tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INQUIRIES, new org.apache.thrift.meta_data.FieldMetaData("inquiries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceInquiry.class))));
    tmpMap.put(_Fields.REQUEST_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("requestContext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestContext.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChoiceRequest.class, metaDataMap);
  }

  public ChoiceRequest() {
  }

  public ChoiceRequest(
    UserRecord userRecord,
    java.lang.String profileId,
    java.util.List<ChoiceInquiry> inquiries,
    RequestContext requestContext)
  {
    this();
    this.userRecord = userRecord;
    this.profileId = profileId;
    this.inquiries = inquiries;
    this.requestContext = requestContext;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChoiceRequest(ChoiceRequest other) {
    if (other.isSetUserRecord()) {
      this.userRecord = new UserRecord(other.userRecord);
    }
    if (other.isSetProfileId()) {
      this.profileId = other.profileId;
    }
    if (other.isSetInquiries()) {
      java.util.List<ChoiceInquiry> __this__inquiries = new java.util.ArrayList<ChoiceInquiry>(other.inquiries.size());
      for (ChoiceInquiry other_element : other.inquiries) {
        __this__inquiries.add(new ChoiceInquiry(other_element));
      }
      this.inquiries = __this__inquiries;
    }
    if (other.isSetRequestContext()) {
      this.requestContext = new RequestContext(other.requestContext);
    }
  }

  public ChoiceRequest deepCopy() {
    return new ChoiceRequest(this);
  }

  @Override
  public void clear() {
    this.userRecord = null;
    this.profileId = null;
    this.inquiries = null;
    this.requestContext = null;
  }

  public UserRecord getUserRecord() {
    return this.userRecord;
  }

  public ChoiceRequest setUserRecord(UserRecord userRecord) {
    this.userRecord = userRecord;
    return this;
  }

  public void unsetUserRecord() {
    this.userRecord = null;
  }

  /** Returns true if field userRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetUserRecord() {
    return this.userRecord != null;
  }

  public void setUserRecordIsSet(boolean value) {
    if (!value) {
      this.userRecord = null;
    }
  }

  public java.lang.String getProfileId() {
    return this.profileId;
  }

  public ChoiceRequest setProfileId(java.lang.String profileId) {
    this.profileId = profileId;
    return this;
  }

  public void unsetProfileId() {
    this.profileId = null;
  }

  /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileId() {
    return this.profileId != null;
  }

  public void setProfileIdIsSet(boolean value) {
    if (!value) {
      this.profileId = null;
    }
  }

  public int getInquiriesSize() {
    return (this.inquiries == null) ? 0 : this.inquiries.size();
  }

  public java.util.Iterator<ChoiceInquiry> getInquiriesIterator() {
    return (this.inquiries == null) ? null : this.inquiries.iterator();
  }

  public void addToInquiries(ChoiceInquiry elem) {
    if (this.inquiries == null) {
      this.inquiries = new java.util.ArrayList<ChoiceInquiry>();
    }
    this.inquiries.add(elem);
  }

  public java.util.List<ChoiceInquiry> getInquiries() {
    return this.inquiries;
  }

  public ChoiceRequest setInquiries(java.util.List<ChoiceInquiry> inquiries) {
    this.inquiries = inquiries;
    return this;
  }

  public void unsetInquiries() {
    this.inquiries = null;
  }

  /** Returns true if field inquiries is set (has been assigned a value) and false otherwise */
  public boolean isSetInquiries() {
    return this.inquiries != null;
  }

  public void setInquiriesIsSet(boolean value) {
    if (!value) {
      this.inquiries = null;
    }
  }

  public RequestContext getRequestContext() {
    return this.requestContext;
  }

  public ChoiceRequest setRequestContext(RequestContext requestContext) {
    this.requestContext = requestContext;
    return this;
  }

  public void unsetRequestContext() {
    this.requestContext = null;
  }

  /** Returns true if field requestContext is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestContext() {
    return this.requestContext != null;
  }

  public void setRequestContextIsSet(boolean value) {
    if (!value) {
      this.requestContext = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USER_RECORD:
      if (value == null) {
        unsetUserRecord();
      } else {
        setUserRecord((UserRecord)value);
      }
      break;

    case PROFILE_ID:
      if (value == null) {
        unsetProfileId();
      } else {
        setProfileId((java.lang.String)value);
      }
      break;

    case INQUIRIES:
      if (value == null) {
        unsetInquiries();
      } else {
        setInquiries((java.util.List<ChoiceInquiry>)value);
      }
      break;

    case REQUEST_CONTEXT:
      if (value == null) {
        unsetRequestContext();
      } else {
        setRequestContext((RequestContext)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_RECORD:
      return getUserRecord();

    case PROFILE_ID:
      return getProfileId();

    case INQUIRIES:
      return getInquiries();

    case REQUEST_CONTEXT:
      return getRequestContext();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_RECORD:
      return isSetUserRecord();
    case PROFILE_ID:
      return isSetProfileId();
    case INQUIRIES:
      return isSetInquiries();
    case REQUEST_CONTEXT:
      return isSetRequestContext();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ChoiceRequest)
      return this.equals((ChoiceRequest)that);
    return false;
  }

  public boolean equals(ChoiceRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userRecord = true && this.isSetUserRecord();
    boolean that_present_userRecord = true && that.isSetUserRecord();
    if (this_present_userRecord || that_present_userRecord) {
      if (!(this_present_userRecord && that_present_userRecord))
        return false;
      if (!this.userRecord.equals(that.userRecord))
        return false;
    }

    boolean this_present_profileId = true && this.isSetProfileId();
    boolean that_present_profileId = true && that.isSetProfileId();
    if (this_present_profileId || that_present_profileId) {
      if (!(this_present_profileId && that_present_profileId))
        return false;
      if (!this.profileId.equals(that.profileId))
        return false;
    }

    boolean this_present_inquiries = true && this.isSetInquiries();
    boolean that_present_inquiries = true && that.isSetInquiries();
    if (this_present_inquiries || that_present_inquiries) {
      if (!(this_present_inquiries && that_present_inquiries))
        return false;
      if (!this.inquiries.equals(that.inquiries))
        return false;
    }

    boolean this_present_requestContext = true && this.isSetRequestContext();
    boolean that_present_requestContext = true && that.isSetRequestContext();
    if (this_present_requestContext || that_present_requestContext) {
      if (!(this_present_requestContext && that_present_requestContext))
        return false;
      if (!this.requestContext.equals(that.requestContext))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUserRecord()) ? 131071 : 524287);
    if (isSetUserRecord())
      hashCode = hashCode * 8191 + userRecord.hashCode();

    hashCode = hashCode * 8191 + ((isSetProfileId()) ? 131071 : 524287);
    if (isSetProfileId())
      hashCode = hashCode * 8191 + profileId.hashCode();

    hashCode = hashCode * 8191 + ((isSetInquiries()) ? 131071 : 524287);
    if (isSetInquiries())
      hashCode = hashCode * 8191 + inquiries.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequestContext()) ? 131071 : 524287);
    if (isSetRequestContext())
      hashCode = hashCode * 8191 + requestContext.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ChoiceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUserRecord()).compareTo(other.isSetUserRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRecord, other.userRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProfileId()).compareTo(other.isSetProfileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, other.profileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInquiries()).compareTo(other.isSetInquiries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInquiries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inquiries, other.inquiries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequestContext()).compareTo(other.isSetRequestContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestContext, other.requestContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChoiceRequest(");
    boolean first = true;

    sb.append("userRecord:");
    if (this.userRecord == null) {
      sb.append("null");
    } else {
      sb.append(this.userRecord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileId:");
    if (this.profileId == null) {
      sb.append("null");
    } else {
      sb.append(this.profileId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inquiries:");
    if (this.inquiries == null) {
      sb.append("null");
    } else {
      sb.append(this.inquiries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestContext:");
    if (this.requestContext == null) {
      sb.append("null");
    } else {
      sb.append(this.requestContext);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (userRecord != null) {
      userRecord.validate();
    }
    if (requestContext != null) {
      requestContext.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChoiceRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChoiceRequestStandardScheme getScheme() {
      return new ChoiceRequestStandardScheme();
    }
  }

  private static class ChoiceRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChoiceRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChoiceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userRecord = new UserRecord();
              struct.userRecord.read(iprot);
              struct.setUserRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROFILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileId = iprot.readString();
              struct.setProfileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INQUIRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list116 = iprot.readListBegin();
                struct.inquiries = new java.util.ArrayList<ChoiceInquiry>(_list116.size);
                ChoiceInquiry _elem117;
                for (int _i118 = 0; _i118 < _list116.size; ++_i118)
                {
                  _elem117 = new ChoiceInquiry();
                  _elem117.read(iprot);
                  struct.inquiries.add(_elem117);
                }
                iprot.readListEnd();
              }
              struct.setInquiriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQUEST_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requestContext = new RequestContext();
              struct.requestContext.read(iprot);
              struct.setRequestContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChoiceRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userRecord != null) {
        oprot.writeFieldBegin(USER_RECORD_FIELD_DESC);
        struct.userRecord.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.profileId != null) {
        oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
        oprot.writeString(struct.profileId);
        oprot.writeFieldEnd();
      }
      if (struct.inquiries != null) {
        oprot.writeFieldBegin(INQUIRIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.inquiries.size()));
          for (ChoiceInquiry _iter119 : struct.inquiries)
          {
            _iter119.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.requestContext != null) {
        oprot.writeFieldBegin(REQUEST_CONTEXT_FIELD_DESC);
        struct.requestContext.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChoiceRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChoiceRequestTupleScheme getScheme() {
      return new ChoiceRequestTupleScheme();
    }
  }

  private static class ChoiceRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChoiceRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChoiceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUserRecord()) {
        optionals.set(0);
      }
      if (struct.isSetProfileId()) {
        optionals.set(1);
      }
      if (struct.isSetInquiries()) {
        optionals.set(2);
      }
      if (struct.isSetRequestContext()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUserRecord()) {
        struct.userRecord.write(oprot);
      }
      if (struct.isSetProfileId()) {
        oprot.writeString(struct.profileId);
      }
      if (struct.isSetInquiries()) {
        {
          oprot.writeI32(struct.inquiries.size());
          for (ChoiceInquiry _iter120 : struct.inquiries)
          {
            _iter120.write(oprot);
          }
        }
      }
      if (struct.isSetRequestContext()) {
        struct.requestContext.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChoiceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.userRecord = new UserRecord();
        struct.userRecord.read(iprot);
        struct.setUserRecordIsSet(true);
      }
      if (incoming.get(1)) {
        struct.profileId = iprot.readString();
        struct.setProfileIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.inquiries = new java.util.ArrayList<ChoiceInquiry>(_list121.size);
          ChoiceInquiry _elem122;
          for (int _i123 = 0; _i123 < _list121.size; ++_i123)
          {
            _elem122 = new ChoiceInquiry();
            _elem122.read(iprot);
            struct.inquiries.add(_elem122);
          }
        }
        struct.setInquiriesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.requestContext = new RequestContext();
        struct.requestContext.read(iprot);
        struct.setRequestContextIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

